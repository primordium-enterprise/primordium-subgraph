enum ClockMode {
  blocknumber
  timestamp
}

# Represents MUSHI token holders, who can delegate their votes to participate in governance
type Member @entity {
  # The address of the member
  id: Bytes!

  # The Delegate that this member's votes are delegated to (null if not delegated at all)
  delegate: Delegate

  # This member's raw MUSHI token balance (not adjusted for decimals)
  tokenBalance: BigInt!
}

# Represents an address with MUSHI votes delegated to it.
type Delegate @entity {
  # The address of the delegate
  id: Bytes!

  # The amount of votes that are delegated to this address
  delegatedVotesBalance: BigInt!

  # A list of ProposalVote entities casted by this delegate
  proposalVotes: [ProposalVote!]! @derivedFrom(field: "delegate")

  # A list of Proposal entities that were created by this delegate
  proposalsCreated: [Proposal!]! @derivedFrom(field: "proposer")

  # A list of Member entities that have delegated their votes to this Delegate
  membersRepresented: [Member!]! @derivedFrom(field: "delegate")

  # Timestamp when the proposer role expires (or zero if not a proposer)
  proposerRoleExpiresAt: BigInt!

  # Timestamp when the canceler role expires (or zero if not a canceler)
  cancelerRoleExpiresAt: BigInt!
}

# type _Schema_
#   @fulltext(
#     name: "proposalSearch"
#     language: en
#     algorithm: rank
#     include: [
#       {
#         entity: "Proposal"
#         fields: [{ name: "title" }, { name: "description" }]
#       }
#     ]
#   )

enum ProposalState {
  Pending
  Active
  Canceled
  Defeated
  Succeeded
  Queued
  Expired
  Executed
}

# Proposals created on the Governor proxy contract
type Proposal @entity {
  # The proposal ID used to identifiy the proposal on-chain (an incrementing integer for Primordium)
  id: Bytes!

  # The address that submitted the proposal
  proposer: Delegate!

  # True if the Delegate had the PROPOSER_ROLE() when the proposal was created.
  isProposerRole: Boolean!

  # The proposal execution's target addresses
  targets: [Bytes!]!

  # The proposal execution's transaction values
  values: [BigInt!]!

  # The proposal execution's transaction calldatas
  calldatas: [Bytes!]!

  # The corresponding signatures for each calldata
  signatures: [String!]!

  # Proposal creation block
  createdAtBlock: BigInt!

  # Proposal creation timestamp
  createdAtTimestamp: BigInt!

  # Hash of the transaction creating this proposal
  createdTransactionHash: Bytes!

  # Proposal title (from the description)
  title: String!

  # Full proposal description
  description: String!

  # Proposal voting begins
  voteStart: BigInt!

  # Proposal voting ends
  voteEnd: BigInt!

  # The unextended vote end
  originalVoteEnd: BigInt!

  # Inferred EIP-6372 CLOCK_MODE(), will be either "mode=blocknumber&from=default" or "mode=timestamp"
  clockMode: ClockMode!

  # The proposal state (not updated from `Pending` to `Active` until the first vote is cast)
  state: Int!

  # Vote count in support of the proposal
  forVotes: BigInt!

  # Vote count against the proposal
  againstVotes: BigInt!

  # Vote count abstaining from the proposal
  abstainVotes: BigInt!

  # Sender that canceled the proposal (if canceled)
  canceler: Delegate

  # True if the canceler had the "CANCELER_ROLE()"
  isCancelerRole: Boolean

  # Block when canceled
  canceledAtBlock: BigInt

  # Timestamp when canceled
  canceledAtTimestamp: BigInt

  # Block when queued
  queuedAtBlock: BigInt

  # Timestamp when queued
  queuedAtTimestamp: BigInt

  # Block when executed
  executedAtBlock: BigInt

  # Timestamp when executed
  executedAtTimestamp: BigInt

  # Transaction hash when this proposal was executed
  executedTransactionHash: Bytes

  # Timestamp when the proposal will be executable after being queued
  eta: BigInt
}

type ProposalVote @entity {
  # The concatenation of the Delegate.id and the Proposal.id
  id: Bytes!

  # The proposal this vote is for
  proposal: Proposal!

  # The delegate that cast this proposal vote
  delegate: Delegate!

  # The vote weight (the amount of votes delegated to this delegate in this vote)
  weight: BigInt!

  # The support value: against (0), for (1), or abstain (2)
  support: Int!

  # True if the support value is for (1)
  isForProposal: Boolean!

  # An explanation of the support (if provided)
  reason: String

  # Additional bytes params (if provided)
  params: Bytes

  # The block number when this vote was cast
  blockNumber: BigInt!

  # The block timestamp when this vote was cast
  blockTimestamp: BigInt!
}

type GovernanceData @entity {
  id: ID!

  # The total MUSHI supply
  totalSupply: BigInt!

  # The max MUSHI supply (is updateable by the Primordium executor)
  maxSupply: BigInt!

  # Total amount of created proposals
  proposalCount: BigInt!

  # The basis points of the total vote supply required to submit a proposal
  proposalThresholdBps: Int!

  # The basis points of the total vote supply of forVotes + abstainVotes required to reach a quorum
  quorumBps: Int!

  # The grace period after a proposal deadline in which a successful proposal must be queued before it is expired
  proposalGracePeriod: BigInt!

  # The timestamp at which proposals can be created to enter governance
  governanceCanBeginAt: BigInt!

  # The basis points threshold of the total supply required to begin governance
  governanceThresholdBps: Int!

  # True if a proposal to enter governance has been successfully passed and executed (allowing any further proposals)
  isFounded: Boolean!

  # Block when founded
  foundedAtBlock: BigInt

  # Timestamp when founded
  foundedAtTimestamp: BigInt

  # The delay before voting begins on a newly-created proposal
  votingDelay: BigInt!

  # The time period for voting on a proposal (denoted in terms of the CLOCK_MODE())
  votingPeriod: BigInt!

  # The percentage majority of forVotes required for proposal success
  percentMajority: Int!

  # The maximum period from the original proposal voting deadline that a proposal's deadline can be extended by
  maxDeadlineExtension: BigInt!

  # The base period used in calculating the proposal deadline extension when a vote is cast
  baseDeadlineExtension: BigInt!

  # The period in which the extensionPercentDecay is applied to the baseDeadlineExtension
  extensionDecayPeriod: BigInt!

  # THe percentage that the baseDeadlineExtension decays by every extensionDecayPeriod
  extensionPercentDecay: Int!

  # Address of the balance shares manager contract
  balanceSharesManager: Bytes!

  # Address of the shares onboarder contract
  sharesOnboarder: Bytes!

  # Address of the distributor contract
  distributor: Bytes!

  # Address of the current zodiac guard for the executor
  guard: Bytes!

  # The minimum delay (in seconds) before a scheduled operation can be executed
  executorMinDelay: BigInt!
}

type ExecutorModule @entity(immutable: true) {
  # The address of the executor module
  id: Bytes!

  # True if the module is enabled
  enabled: Boolean!

  # Block number when this module was enabled
  enabledAtBlock: BigInt!

  # Block timestmap when this module was enabled
  enabledAtTimestamp: BigInt!
}

type ExecutorCallExecutedEvent @entity(immutable: true) {
  id: Bytes!

  # The call target address
  target: Bytes!

  # The call value
  value: BigInt!

  # The calldata
  calldata: Bytes!

  # The type of operation. 0 for CALL and 1 for DELEGATECALL
  operation: Int!

  # The block number when executed
  blockNumber: BigInt!

  # The block timestamp when executed
  blockTimestamp: BigInt!

  # The transaction hash
  transactionHash: Bytes!
}

type ExecutorOperation @entity {
  # The ID is the uint256 opNonce for the operation, represented as 32 big-endian bytes
  id: Bytes!

  # The module that created the operation
  module: ExecutorModule!

  # The target address
  to: Bytes!

  # The call value
  value: BigInt!

  # The calldata for the call
  calldata: Bytes!

  # The operation type, 0 for CALL and 1 for DELEGATECALL
  operation: Int!

  # The delay (in seconds) after scheduling before it can be executed
  delay: BigInt!

  # Block number when scheduled
  scheduledAtBlock: BigInt!

  # Block timestamp when scheduled
  scheduledAtTimestamp: BigInt!

  # True if canceled
  isCanceled: Boolean!

  # Block number when canceled (or null)
  canceledAtBlock: BigInt

  # Block timestamp when canceled (or null)
  canceledAtTimestamp: BigInt

  # True if executed
  isExecuted: Boolean!

  # Block number when executed (or null)
  executedAtBlock: BigInt

  # Block timestamp when executed (or null)
  executedAtTimestamp: BigInt
}

type DepositRegistered @entity(immutable: true) {
  id: Bytes!

  # The address of the member that received the minted MUSHI tokens
  account: Member!

  # The address of the deposited quote asset
  quoteAsset: Bytes!

  # The amount of deposited quote asset
  depositAmount: BigInt!

  # The amount of MUSHI tokens minted to the account
  mintAmount: BigInt!

  # Block number of this event
  blockNumber: BigInt!

  # Block timestamp of this event
  blockTimestamp: BigInt!

  # Transaction hash that contained this event
  transactionHash: Bytes!
}

type WithdrawalProcessed @entity(immutable: true) {
  id: Bytes!

  # The withdrawing member
  account: Member!

  # Address that receives the ETH/ERC20 payouts
  receiver: Bytes!

  # The amount of MUSHI shares burned
  sharesBurned: BigInt!

  # The total supply of MUSHI shares (prior to burning these shares)
  totalSharesSupply: BigInt!

  # Addresses of ERC20 tokens paid out to the receiver (address(0) for ETH)
  assets: [Bytes!]!

  # The payout amount of each of the listed assets above
  payouts: [BigInt!]!

  # Block number
  blockNumber: BigInt!

  # Block timestamp
  blockTimestamp: BigInt!

  # Transaction hash
  transactionHash: Bytes!
}
